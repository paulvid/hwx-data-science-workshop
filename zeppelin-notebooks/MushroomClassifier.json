{"paragraphs":[{"text":"%md\n\n## Data Science in Apache Spark\n### Mushrooms Workbook - Hunger in the Woods\n#### Random Forest Classifier\n\n**Level**: Moderate\n**Language**: Scala\n**Requirements**: \n- [HDP 2.6.X]\n- Spark 2.x\n\n**Author**: Ian Brooks\n**Follow** [LinkedIn - Ian Brooks PhD] (https://www.linkedin.com/in/ianrbrooksphd/)\n\nWhat would Bear do? \n\n![Bear](https://si.wsj.net/public/resources/images/BN-PQ649_bear09_J_20160901003355.jpg \"Bear\")\n\n## Pre-Run Instructions\n\n**File Upload:** Upload the source data file MushroomDatabase.csv to HDFS in the /tmp directory ","user":"admin","dateUpdated":"2018-12-03T14:44:53-0800","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563954_514887603","id":"20180409-123904_1018491284","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-12-03T14:44:53-0800","dateFinished":"2018-12-03T14:44:54-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22066"},{"title":"Download Datafile and Copy to HDFS","text":"%sh\n\n# Download Data from Github\nwget https://raw.githubusercontent.com/kirkhas/datascience-workshop/master/datascience-workshop/Mushroom%20Classifier/MushroomDatabase.csv -O /tmp/MushroomDatabase.csv\n\n# Make HDFS Directory and Load CSV files into HDFS\nhadoop fs -mkdir /tmp/\nhadoop fs -put /tmp/MushroomDatabase.csv /tmp/MushroomDatabase.csv\n\nhadoop fs -ls /tmp/Mush*","user":"admin","dateUpdated":"2018-12-03T14:44:02-0800","config":{"editorSetting":{"language":"sh","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sh","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563959_512963858","id":"20180515-064741_1099839956","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T08:59:38-0800","dateFinished":"2018-11-21T08:59:48-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22067"},{"title":"Load Dependency Libraries","text":"%spark2.dep \n\nz.load(\"com.databricks:spark-csv_2.11:1.5.0\")\n","user":"admin","dateUpdated":"2018-11-21T08:59:37-0800","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563958_513348607","id":"20180409-124313_161475820","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T08:59:37-0800","dateFinished":"2018-11-21T08:59:40-0800","status":"ERROR","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22068"},{"title":"initialize Spark Session","text":"%spark2\n\nimport org.apache.spark.sql.SparkSession\nval spark: SparkSession = SparkSession.builder\n  .appName(\"MushroomClassifier\")  // optional and will be autogenerated if not specified\n  .master(\"local[*]\")               // avoid hardcoding the deployment environment\n  .enableHiveSupport()              // self-explanatory, isn't it?\n  .config(\"spark.sql.warehouse.dir\", \"target/spark-warehouse\")\n  .getOrCreate\n\nspark.version","user":"admin","dateUpdated":"2018-11-21T08:59:37-0800","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563959_512963858","id":"20180409-123845_1776601428","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T08:59:38-0800","dateFinished":"2018-11-21T08:59:42-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22069"},{"title":"Import Data Set","text":"%spark2\n\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.DataFrame\nimport scala.collection.mutable.ListBuffer\n\n\n//Note the location of the Data File - hdfs://HostWithNameNode:8020/tmp/MushroomDatabase.csv\n//Create a data frame from CSV File \nval df_WholeSetRaw = sqlContext.read.format(\"com.databricks.spark.csv\").option(\"header\", \"true\").option(\"inferSchema\", \"true\").load(\"/tmp/MushroomDatabase.csv\")\n\n//Create Table from DataFrame\ndf_WholeSetRaw.createOrReplaceTempView(\"RawMushData\")\n\n//Display resulting Infered schema \ndf_WholeSetRaw.printSchema()","user":"admin","dateUpdated":"2018-11-21T08:59:38-0800","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563960_511040114","id":"20180409-124408_494881545","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T08:59:40-0800","dateFinished":"2018-11-21T08:59:46-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22070"},{"text":"%sql\n\nselect * from RawMushData limit 10\n","user":"admin","dateUpdated":"2018-11-21T08:59:38-0800","config":{"colWidth":12,"editorMode":"ace/mode/sql","results":{},"enabled":true,"editorSetting":{"language":"sql","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563961_510655365","id":"20180409-124734_1577951246","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T08:59:42-0800","dateFinished":"2018-11-21T08:59:46-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22071"},{"title":"Mushroom Distribution","text":"%sql\n\nselect Label, count(Label) from RawMushData group by Label","user":"admin","dateUpdated":"2018-11-21T08:59:38-0800","config":{"editorSetting":{"language":"sql"},"colWidth":6,"editorMode":"ace/mode/sql","title":true,"results":{"0":{"graph":{"mode":"pieChart","height":300,"optionOpen":false},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563962_511809612","id":"20180409-124808_580863699","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T08:59:46-0800","dateFinished":"2018-11-21T08:59:48-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22072"},{"title":"Odor By Poisonous","text":"%sql\n\nselect Label, Odor, count(Odor) from RawMushData group by Odor, Label","user":"admin","dateUpdated":"2018-11-21T08:59:38-0800","config":{"editorSetting":{"language":"sql"},"colWidth":6,"editorMode":"ace/mode/sql","editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"scatterChart":{"xAxis":{"name":"Label","index":0,"aggr":"sum"},"yAxis":{"name":"Odor","index":1,"aggr":"sum"},"group":{"name":"Odor","index":1,"aggr":"sum"}},"multiBarChart":{"stacked":true},"pieChart":{}},"commonSetting":{},"keys":[{"name":"Odor","index":1,"aggr":"sum"}],"groups":[{"name":"Label","index":0,"aggr":"sum"}],"values":[{"name":"count(Odor)","index":2,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563963_511424863","id":"20180409-130529_129636148","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T08:59:47-0800","dateFinished":"2018-11-21T08:59:49-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22073"},{"title":"Gill Color By Poisonous","text":"%sql\n\nselect Label, GillColor, count(GillColor) from RawMushData group by GillColor, Label","user":"admin","dateUpdated":"2018-11-21T08:59:38-0800","config":{"editorSetting":{"language":"sql"},"colWidth":6,"editorMode":"ace/mode/sql","editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"stacked":true}},"commonSetting":{},"keys":[{"name":"GillColor","index":1,"aggr":"sum"}],"groups":[{"name":"Label","index":0,"aggr":"sum"}],"values":[{"name":"count(GillColor)","index":2,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563963_511424863","id":"20180409-130806_691173633","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T08:59:48-0800","dateFinished":"2018-11-21T08:59:50-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22074"},{"title":"Spore Print Color By Poisonous","text":"%sql\n\nselect Label, SporePrintColor, count(SporePrintColor) from RawMushData group by SporePrintColor, Label","user":"admin","dateUpdated":"2018-11-21T08:59:38-0800","config":{"editorSetting":{"language":"sql"},"colWidth":6,"editorMode":"ace/mode/sql","editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"scatterChart":{"xAxis":{"name":"Label","index":0,"aggr":"sum"},"yAxis":{"name":"Odor","index":1,"aggr":"sum"},"group":{"name":"Odor","index":1,"aggr":"sum"}},"multiBarChart":{"stacked":true},"pieChart":{}},"commonSetting":{},"keys":[{"name":"SporePrintColor","index":1,"aggr":"sum"}],"groups":[{"name":"Label","index":0,"aggr":"sum"}],"values":[{"name":"count(SporePrintColor)","index":2,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563964_509501118","id":"20180409-125153_878201397","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T08:59:49-0800","dateFinished":"2018-11-21T08:59:52-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22075"},{"title":"String to Index the String Columns","text":"%spark2\n\nimport org.apache.spark.ml.feature.{OneHotEncoder, StringIndexer}\n\n//Convert Strings to Index Values\n\n// Poison Label\nval indexer1 = new StringIndexer().setInputCol(\"Label\").setOutputCol(\"Label_Index\").fit(df_WholeSetRaw)\nval indexed1 = indexer1.transform(df_WholeSetRaw)\n\n//Cap Shape\nval indexer2 = new StringIndexer().setInputCol(\"CapShape\").setOutputCol(\"CapShape_Index\").fit(indexed1)\nval indexed2 = indexer2.transform(indexed1)\n\n//Cap Surface \nval indexer3 = new StringIndexer().setInputCol(\"CapSurface\").setOutputCol(\"CapSurface_Index\").fit(indexed2)\nval indexed3 = indexer3.transform(indexed2)\n\n//Cap Color\nval indexer4 = new StringIndexer().setInputCol(\"CapColor\").setOutputCol(\"CapColor_Index\").fit(indexed3)\nval indexed4 = indexer4.transform(indexed3)\n\n//Bruises\nval indexer5 = new StringIndexer().setInputCol(\"Bruises\").setOutputCol(\"Bruises_Index\").fit(indexed4)\nval indexed5 = indexer5.transform(indexed4)\n\n//Odor\nval indexer6 = new StringIndexer().setInputCol(\"Odor\").setOutputCol(\"Odor_Index\").fit(indexed5)\nval indexed6 = indexer6.transform(indexed5)\n\n//Gill Attachment\nval indexer7 = new StringIndexer().setInputCol(\"GillAttachment\").setOutputCol(\"GillAttachment_Index\").fit(indexed6)\nval indexed7 = indexer7.transform(indexed6)\n\n//Gill Spacing\nval indexer8 = new StringIndexer().setInputCol(\"GillSpacing\").setOutputCol(\"GillSpacing_Index\").fit(indexed7)\nval indexed8 = indexer8.transform(indexed7)\n\n//Gill Size\nval indexer9 = new StringIndexer().setInputCol(\"GillSize\").setOutputCol(\"GillSize_Index\").fit(indexed8)\nval indexed9 = indexer9.transform(indexed8)\n\n//Gill Color\nval indexer10 = new StringIndexer().setInputCol(\"GillColor\").setOutputCol(\"GillColor_Index\").fit(indexed9)\nval indexed10 = indexer10.transform(indexed9)\n\n//Stalk Shape\nval indexer11 = new StringIndexer().setInputCol(\"StalkShape\").setOutputCol(\"StalkShape_Index\").fit(indexed10)\nval indexed11 = indexer11.transform(indexed10)\n\n//Stalk Root\nval indexer12 = new StringIndexer().setInputCol(\"StalkRoot\").setOutputCol(\"StalkRoot_Index\").fit(indexed11)\nval indexed12 = indexer12.transform(indexed11)\n\n//SSAR\nval indexer13 = new StringIndexer().setInputCol(\"SSAR\").setOutputCol(\"SSAR_Index\").fit(indexed12)\nval indexed13 = indexer13.transform(indexed12)\n\n//SSBR\nval indexer14 = new StringIndexer().setInputCol(\"SSBR\").setOutputCol(\"SSBR_Index\").fit(indexed13)\nval indexed14 = indexer14.transform(indexed13)\n\n//SCAR\nval indexer15 = new StringIndexer().setInputCol(\"SCAR\").setOutputCol(\"SCAR_Index\").fit(indexed14)\nval indexed15 = indexer15.transform(indexed14)\n\n//SCBR\nval indexer16 = new StringIndexer().setInputCol(\"SCBR\").setOutputCol(\"SCBR_Index\").fit(indexed15)\nval indexed16 = indexer16.transform(indexed15)\n\n//Veil Type\nval indexer17 = new StringIndexer().setInputCol(\"VeilType\").setOutputCol(\"VeilType_Index\").fit(indexed16)\nval indexed17 = indexer17.transform(indexed16)\n\n//Veil Color\nval indexer18 = new StringIndexer().setInputCol(\"VeilColor\").setOutputCol(\"VeilColor_Index\").fit(indexed17)\nval indexed18 = indexer18.transform(indexed17)\n\n//Ring Number\nval indexer19 = new StringIndexer().setInputCol(\"RingNumber\").setOutputCol(\"RingNumber_Index\").fit(indexed18)\nval indexed19 = indexer19.transform(indexed18)\n\n//Ring Type\nval indexer20 = new StringIndexer().setInputCol(\"RingType\").setOutputCol(\"RingType_Index\").fit(indexed19)\nval indexed20 = indexer20.transform(indexed19)\n\n//SporePrintColor\nval indexer21 = new StringIndexer().setInputCol(\"SporePrintColor\").setOutputCol(\"SporePrintColor_Index\").fit(indexed20)\nval indexed21 = indexer21.transform(indexed20)\n\n//Population\nval indexer22 = new StringIndexer().setInputCol(\"Population\").setOutputCol(\"Population_Index\").fit(indexed21)\nval indexed22 = indexer22.transform(indexed21)\n\n//Habitat\nval indexer23 = new StringIndexer().setInputCol(\"Habitat\").setOutputCol(\"Habitat_Index\").fit(indexed22)\nval indexed23 = indexer23.transform(indexed22)\n\nval df_CompletedIndex = indexed23\n","user":"admin","dateUpdated":"2018-11-21T08:59:38-0800","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563964_509501118","id":"20180409-125046_437804174","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T08:59:51-0800","dateFinished":"2018-11-21T09:00:20-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22076"},{"title":"Create Vector for Extracted Features","text":"%spark2\nimport org.apache.spark.mllib.linalg.Vectors \nimport org.apache.spark.ml.feature.VectorAssembler\n\n//df_CompletedIndex.printSchema()\n\n//Assemble the Feature Vector from extacted features values\nval assembler = new VectorAssembler().setInputCols(Array(\"CapShape_Index\", \"CapSurface_Index\", \"CapColor_Index\", \"Bruises_Index\",\"Odor_Index\", \"GillAttachment_Index\", \"GillSpacing_Index\", \"GillSize_Index\", \"GillColor_Index\", \"StalkShape_Index\", \"StalkRoot_Index\", \"SSAR_Index\", \"SSBR_Index\", \"SCAR_Index\", \"SCBR_Index\", \"VeilType_Index\", \"VeilColor_Index\", \"RingNumber_Index\", \"RingType_Index\", \"SporePrintColor_Index\", \"Population_Index\", \"Habitat_Index\")).setOutputCol(\"features\")\n\n//Create Feature Vector\nval FeatureVector = assembler.transform(df_CompletedIndex)\n\n//Display results\nFeatureVector.take(2)\n\n//Create Feature List\nval featureList = Array(\"CapShape_Index\", \"CapSurface_Index\", \"CapColor_Index\", \"Bruises_Index\",\"Odor_Index\", \"GillAttachment_Index\", \"GillSpacing_Index\", \"GillSize_Index\", \"GillColor_Index\", \"StalkShape_Index\", \"StalkRoot_Index\", \"SSAR_Index\", \"SSBR_Index\", \"SCAR_Index\", \"SCBR_Index\", \"VeilType_Index\", \"VeilColor_Index\", \"RingNumber_Index\", \"RingType_Index\", \"SporePrintColor_Index\", \"Population_Index\", \"Habitat_Index\")\n\nFeatureVector.printSchema()\n","user":"admin","dateUpdated":"2018-11-21T08:59:38-0800","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563965_509116369","id":"20180409-134424_2021300279","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T08:59:52-0800","dateFinished":"2018-11-21T09:00:25-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22077"},{"title":"Create Test and Train Sets","text":"%spark2\nimport org.apache.spark.ml.feature.{IndexToString, StringIndexer}\n\nval splits = FeatureVector.randomSplit(Array(0.8, 0.2))\nval df_TrainSet = splits(0)\nval df_TestSet = splits(1)\n\ndf_TrainSet.printSchema()\n\nval converter = new IndexToString()\n  .setInputCol(\"Label_Index\")\n  .setOutputCol(\"originalLabel\")\n\nval converted = converter.transform(df_TrainSet)\n\nconverted.take(1)\n","user":"admin","dateUpdated":"2018-11-21T08:59:38-0800","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563967_509885867","id":"20180409-134711_846818220","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T09:00:21-0800","dateFinished":"2018-11-21T09:00:30-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22078"},{"title":"Train and Run Model","text":"%spark2\n\nimport org.apache.spark.ml.classification.RandomForestClassificationModel\nimport org.apache.spark.ml.classification.RandomForestClassifier\nimport org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\nimport org.apache.spark.ml.tuning.{ParamGridBuilder, CrossValidator}\nimport org.apache.spark.ml.feature.VectorSlicer\n\n// Train a RandomForest model.\nval rf_classifier = new RandomForestClassifier()\n        .setLabelCol(\"Label_Index\")\n        .setFeaturesCol(\"features\")\n        .setNumTrees(150)\n        .setMaxBins(200)\n        //.setThresholds(Array(0.45,0.75,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55))\n        \n//Set up Evalution for Cross-Validation \n//val metric = \"accuracy\"\nval CV_evaluator = new BinaryClassificationEvaluator()\n  .setLabelCol(\"Label_Index\")\n  .setRawPredictionCol(\"prediction\")\n//  .setMetricName(metric)\n\n//Set up grid search for model parameters \nval paramGrid = new ParamGridBuilder()\n    .addGrid(rf_classifier.numTrees, Array(50, 150, 350))\n    .build()\n\nval cv = new CrossValidator()\n  .setEstimator(rf_classifier)\n  .setEvaluator(CV_evaluator) \n  .setEstimatorParamMaps(paramGrid)\n  .setNumFolds(3)        \n        \n// Train model\nval model = cv.fit(df_TrainSet)\n\n// Make predictions for Model Evaluation\nval Predictions = model.transform(df_TestSet)\n\nval Results = Predictions.select(\"Label\",\"Label_Index\",\"prediction\",\"CapShape\", \"CapSurface\", \"CapColor\", \"Bruises\",\"Odor\", \"GillAttachment\", \"GillSpacing\", \"GillSize\", \"GillColor\", \"StalkShape\", \"StalkRoot\", \"SSAR\", \"SSBR\", \"SCAR\", \"SCBR\", \"VeilType\", \"VeilColor\", \"RingNumber\", \"RingType\", \"SporePrintColor\", \"Population\", \"Habitat\")\n\n// Select example rows to display.\nResults.createOrReplaceTempView(\"MushResults\")","user":"admin","dateUpdated":"2018-11-21T08:59:39-0800","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563968_495650158","id":"20180409-140159_807737511","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T09:00:25-0800","dateFinished":"2018-11-21T09:01:46-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22079"},{"title":"Model Evaluation","text":"%spark2\nimport org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\nimport org.apache.spark.mllib.regression.LabeledPoint \n\nval metrics = new BinaryClassificationEvaluator()\n  .setLabelCol(\"Label_Index\")\n  .setRawPredictionCol(\"prediction\")\n  .setMetricName(\"areaUnderROC\")\nval areaUnderROC = metrics.evaluate(Predictions)\nprintln(\"Area Under ROC = \" + areaUnderROC)\n\nval metrics = new BinaryClassificationEvaluator()\n  .setLabelCol(\"Label_Index\")\n  .setRawPredictionCol(\"prediction\")\n  .setMetricName(\"areaUnderPR\")\nval areaUnderPRC = metrics.evaluate(Predictions)\nprintln(\"Area Under PRC = \" + areaUnderPRC)\n\nval df_LabeledSet = Results.select(\"prediction\", \"Label_Index\").rdd\n\nval predictionAndLabels =  df_LabeledSet.map { row => (row(0).asInstanceOf[Double], row(1).asInstanceOf[Double])} \n\n//predictionAndLabels.count()\n\n// Instantiate metrics object\nval metrics = new BinaryClassificationMetrics(predictionAndLabels )\n\n// Precision by threshold\nval precision = metrics.precisionByThreshold.collect()\n\nprecision.foreach { case (t, p) =>\n  println(s\"Threshold: $t, Precision: $p\")\n}\n\n// Recall by threshold\nval recall = metrics.recallByThreshold.collect()\n\nrecall.foreach { case (t, r) =>\n  println(s\"Threshold: $t, Recall: $r\")\n}\n\n// Precision-Recall Curve\nval PRC = metrics.pr.collect()\n\n// F-measure\nval f1Score = metrics.fMeasureByThreshold.collect()\n\nf1Score.foreach { case (t, f) =>\n  println(s\"Threshold: $t, F-score: $f, Beta = 1\")\n}\n","user":"admin","dateUpdated":"2018-11-21T08:59:39-0800","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563968_495650158","id":"20180409-145829_6825321","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T09:00:30-0800","dateFinished":"2018-11-21T09:02:08-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22080"},{"title":"Feature Ranking","text":"%spark2\n\nval rf_model = rf_classifier.fit(df_TestSet)\n\nval features = df_TestSet.select(\"features\")\n\nval featureImp = rf_model.featureImportances\n\nfeatureImp.toArray.zip(featureList).map(_.swap).sortBy(-_._2).foreach(x => println(x._1 + \" -> \" + x._2))\n\n","user":"admin","dateUpdated":"2018-11-21T08:59:39-0800","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563969_495265409","id":"20180409-150438_1067399204","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T09:01:46-0800","dateFinished":"2018-11-21T09:02:17-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22081"},{"text":"%sql \n\nselect * from MushResults limit 10 \n","user":"admin","dateUpdated":"2018-11-21T08:59:39-0800","config":{"colWidth":12,"editorMode":"ace/mode/sql","results":{},"enabled":true,"editorSetting":{"language":"sql","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563970_496419656","id":"20180410-063709_1893215056","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T09:02:09-0800","dateFinished":"2018-11-21T09:02:19-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22082"},{"text":"%sql select label, prediction, count(prediction) from MushResults where  group by label, prediction\n","user":"admin","dateUpdated":"2018-11-21T08:59:39-0800","config":{"colWidth":12,"editorMode":"ace/mode/sql","results":{},"enabled":true,"editorSetting":{"language":"sql","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563971_496034907","id":"20180410-121159_1837585684","dateCreated":"2018-11-21T08:59:23-0800","dateStarted":"2018-11-21T09:02:18-0800","dateFinished":"2018-11-21T09:02:25-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22083"},{"text":"%spark\n","user":"admin","dateUpdated":"2018-11-21T08:59:39-0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542819563972_494111162","id":"20180413-090409_362763940","dateCreated":"2018-11-21T08:59:23-0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22084"}],"name":"Mushroom Classifier - Scala","id":"2DXZD7EU5","angularObjects":{"2CHS8UYQQ:shared_process":[],"2CKX6DGQZ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKX8WPU1:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}