
{
  "configurations": [
    {
      "yarn-site": {
        "properties": {
          "yarn.nodemanager.resource.cpu-vcores": "6",
          "yarn.nodemanager.resource.memory-mb": "23296",
          "yarn.scheduler.maximum-allocation-mb": "23296"
        }
      }
    },
    {
      "core-site": {
        "properties_attributes": {},
        "properties": {
          "fs.s3a.threads.max": "1000",
          "fs.s3a.threads.core": "500",
          "fs.s3a.max.total.tasks": "1000",
          "fs.s3a.connection.maximum": "1500"
        }
      }
    },
    {
      "capacity-scheduler": {
        "properties": {
          "yarn.scheduler.capacity.root.queues": "default",
          "yarn.scheduler.capacity.root.capacity": "100",
          "yarn.scheduler.capacity.root.default.capacity": "100",
          "yarn.scheduler.capacity.root.default.maximum-capacity": "100"
        }
      }
    },
    {
      "spark2-defaults": {
        "properties_attributes": {},
        "properties": {
          "spark.sql.hive.hiveserver2.jdbc.url": "jdbc:hive2://%HOSTGROUP::master%:2181/;serviceDiscoveryMode=zooKeeper;zooKeeperNamespace=hiveserver2",
          "spark.sql.hive.hiveserver2.jdbc.url.principal": "hive/_HOST@EC2.INTERNAL",
          "spark.datasource.hive.warehouse.metastoreUri": "thrift://%HOSTGROUP::master%:9083",
          "spark.datasource.hive.warehouse.load.staging.dir": "/tmp",
          "spark.hadoop.hive.zookeeper.quorum": "%HOSTGROUP::master%:2181"
        }
      }
    },
    {
      "hdfs-site": {
        "properties_attributes": {},
        "properties": {
        }
      }
    },
    {
      "ranger-hive-audit": {
        "properties_attributes": {},
        "properties": {
          "xasecure.audit.destination.hdfs.file.rollover.sec": "600"
        }
      }
    },
    {
      "hive-interactive-env": {
        "enable_hive_interactive": "false",
        "hive_security_authorization": "Ranger"
      }
    },
    {
      "hive-interactive-site": {
        "hive.exec.orc.split.strategy": "BI",
        "hive.stats.fetch.bitvector": "true",
        "hive.metastore.rawstore.impl": "org.apache.hadoop.hive.metastore.cache.CachedStore"
      }
    },
    {
      "hive-site": {
      	"hive.metastore.warehouse.dir": "/apps/hive/warehouse",
        "hive.exec.compress.output": "true",
        "hive.merge.mapfiles": "true",
        "hive.server2.tez.initialize.default.sessions": "true",
        "hive.server2.transport.mode": "http",
        "hive.metastore.dlm.events": "true",
        "hive.metastore.transactional.event.listeners": "org.apache.hive.hcatalog.listener.DbNotificationListener",
        "hive.repl.cm.enabled": "true",
        "hive.repl.cmrootdir": "/apps/hive/cmroot",
        "hive.repl.rootdir": "/apps/hive/repl"
      }
    },
    {
      "ranger-admin-site": {
        "properties_attributes": {},
        "properties": {
          "ranger.jpa.jdbc.url": "jdbc:postgresql://localhost:5432/ranger"
        }
      }
    },
    {
      "ranger-env": {
        "properties_attributes": {},
        "properties": {
          "xasecure.audit.destination.hdfs.dir": "/apps/ranger/audit",
          "ranger_admin_password": "{{{ general.password }}}",
          "keyadmin_user_password": "{{{ general.password }}}",
          "rangertagsync_user_password": "{{{ general.password }}}",
          "rangerusersync_user_password": "{{{ general.password }}}",
          "is_solrCloud_enabled": "true",
          "ranger-hdfs-plugin-enabled": "Yes",
          "ranger-hive-plugin-enabled": "Yes",
          "ranger-atlas-plugin-enabled": "Yes",
          "ranger-knox-plugin-enabled": "Yes"
        }
      }
    },
    {
      "atlas-env": {
        "properties_attributes": {},
        "properties": {
          "atlas.admin.password": "{{{ general.password }}}"
        }
      }
    },
    {
      "kafka-broker": {
        "properties_attributes": {},
        "properties": {
          "default.replication.factor": "1",
          "offsets.topic.replication.factor": "1"
        }
      }
    },
    {
      "hbase-site": {
        "properties_attributes": {},
        "properties": {
          "phoenix.query.timeoutMs": "60000",
          "hfile.block.cache.size": "0.4",
          "hbase.regionserver.global.memstore.size": "0.4",
          "hbase.regionserver.handler.count": "60",
          "hbase.hregion.memstore.flush.size": "536870912",
          "hbase.hregion.max.filesize": "21474836480",
          "hbase.regionserver.wal.codec": "org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec",
          "hbase.defaults.for.version.skip": "true",
          "hbase.region.server.rpc.scheduler.factory.class": "org.apache.hadoop.hbase.ipc.PhoenixRpcSchedulerFactory",
          "hbase.rpc.controllerfactory.class": "org.apache.hadoop.hbase.ipc.controller.ServerRpcControllerFactory",
          "phoenix.functions.allowUserDefinedFunctions": "true",
          "hbase.bucketcache.size": "24000",
          "hbase.bucketcache.ioengine": "file:/hbase/cache",
          "hbase.bucketcache.combinedcache.enabled": "true",
          "hbase.rs.cacheblocksonwrite": "true",
          "hfile.block.bloom.cacheonwrite": "true",
          "hfile.block.index.cacheonwrite": "true",
          "hbase.rootdir": "/apps/hbase"
        }
      }
    },
    {
      "hbase-env": {
        "properties_attributes": {},
        "properties": {
          "hbase_java_io_tmpdir": "/tmp",
          "hbase_log_dir": "/var/log/hbase",
          "hbase_master_heapsize": "1024m",
          "hbase_pid_dir": "/var/run/hbase",
          "hbase_regionserver_heapsize": "12000m",
          "hbase_regionserver_shutdown_timeout": "30",
          "hbase_regionserver_xmn_max": "12000",
          "hbase_regionserver_xmn_ratio": "0.2",
          "hbase_user": "hbase",
          "hbase_user_nofile_limit": "32000",
          "hbase_user_nproc_limit": "16000",
          "phoenix_sql_enabled": "true"
        }
      }
    },
    {
      "druid-common": {
        "properties_attributes": {},
        "properties": {
          "druid.metadata.storage.type": "postgresql",
          "druid.metadata.storage.connector.user": "druid",
          "druid.metadata.storage.connector.password": "druid",
          "druid.metadata.storage.connector.connectURI": "jdbc:postgresql://%HOSTGROUP::master%:5432/druid",
          "druid.extensions.loadList": "[\"postgresql-metadata-storage\",\"druid-datasketches\", \"druid-hdfs-storage\", \"druid-kafka-indexing-service\", \"ambari-metrics-emitter\"]",
          "druid.selectors.indexing.serviceName": "druid/overlord",
          "druid.storage.type": "hdfs",
          "druid.storage.storageDirectory": "/apps/druid/warehouse",
          "druid.storage.useS3aSchema": "true",
          "druid.indexer.logs.type": "hdfs",
          "druid.indexer.logs.directory": "/user/druid/logs"
        }
      }
    },
    {
      "druid-overlord": {
        "properties_attributes": {},
        "properties": {
          "druid.indexer.storage.type": "metadata",
          "druid.indexer.runner.type": "remote",
          "druid.service": "druid/overlord",
          "druid.port": "8090",
          "druid.indexer.logs.type": "hdfs",
          "druid.indexer.logs.directory": "/user/druid/logs"
        }
      }
    },
    {
      "druid-middlemanager": {
        "properties_attributes": {},
        "properties": {
          "druid.server.http.numThreads": "50",
          "druid.worker.capacity": "3",
          "druid.processing.numThreads": "2",
          "druid.indexer.runner.javaOpts": "-server -Xmx2g -Duser.timezone=UTC -Dfile.encoding=UTF-8 -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager -Dhdp.version={{stack_version}} -Dhadoop.mapreduce.job.classloader=true",
          "druid.service": "druid/middlemanager",
          "druid.port": "8091",
          "druid.indexer.logs.type": "hdfs",
          "druid.indexer.logs.directory": "/user/druid/logs",
          "druid.indexer.fork.property.druid.storage.storageDirectory": "/apps/druid/warehouse",
          "druid.indexer.fork.property.druid.storage.type": "hdfs"
        }
      }
    },
    {
      "druid-coordinator": {
        "properties_attributes": {},
        "properties": {
          "druid.coordinator.merge.on": "false",
          "druid.port": "8081"
        }
      }
    },
    {
      "druid-historical": {
        "properties_attributes": {},
        "properties": {
          "druid.server.http.numThreads": "50",
          "druid.processing.numThreads": "2",
          "druid.service": "druid/historical",
          "druid.port": "8083",
          "druid.server.maxSize": "300000000000"
        }
      }
    },
    {
      "druid-broker": {
        "properties_attributes": {},
        "properties": {
          "druid.cache.type": "local",
          "druid.server.http.numThreads": "50",
          "druid.broker.http.numConnections": "5",
          "druid.processing.numThreads": "2",
          "druid.service": "druid/broker",
          "druid.port": "8082"
        }
      }
    },
    {
      "druid-router": {
        "properties_attributes": {},
        "properties": {}
      }
    },
    {
      "superset": {
        "properties_attributes": {},
        "properties": {
          "SECRET_KEY": "{{{ general.password }}}",
          "SUPERSET_DATABASE_TYPE": "sqlite"
        }
      }
    },
    {
      "nifi-ambari-config": {
        "nifi.sensitive.props.key": "{{{ general.password }}}",
        "nifi.security.encrypt.configuration.password": "{{{ general.password }}}",
        "nifi.max_mem": "4g"
      }
    },
    {
      "nifi-properties": {
        "nifi.sensitive.props.key": "{{{ general.password }}}",
        "nifi.security.user.login.identity.provider": ""
      }
    },
    {
      "nifi-registry-ambari-config": {
        "nifi.registry.security.encrypt.configuration.password": "{{{ general.password }}}"
      }
    },
    {
      "nifi-registry-properties": {
        "nifi.registry.sensitive.props.key": "{{{ general.password }}}",
        "nifi.registry.db.password": "{{{ general.password }}}"
      }
    },
    {
      "registry-common": {
        "properties_attributes": {},
        "properties": {
          "jar.storage.type": "local",
          "database_name": "registry",
          "registry.storage.query.timeout": "30",
          "registry.schema.cache.expiry.interval": "3600",
          "registry.storage.connector.connectURI": "jdbc:mysql://localhost:3306/registry",
          "jar.storage": "/hdf/registry",
          "registry.storage.connector.user": "registry",
          "registry.storage.connector.password": "registry",
          "jar.storage.hdfs.url": "hdfs://localhost:9090",
          "port": "7788",
          "adminPort": "7789",
          "registry.schema.cache.size": "10000",
          "registry.storage.type": "mysql"
        }
      }
    },
    {
      "streamline-common": {
        "jar.storage.type": "local",
        "streamline.storage.type": "mysql",
        "streamline.storage.connector.connectURI": "jdbc:mysql://localhost:3306/streamline",
        "registry.url" : "http://localhost:7788/api/v1",
        "streamline.dashboard.url" : "http://localhost:9089",
        "streamline.storage.connector.password": "streamline"
      }
    },
    {
        "storm-env": {
            "properties_attributes": {},
            "properties": {
                "storm_user_nofile_limit": "128000",
                "jmxremote_port": "56431",
                "storm.atlas.hook": "true",
                "storm_log_dir": "/var/log/storm",
                "storm_pid_dir": "/var/run/storm",
                "nimbus_seeds_supported": "true",
                "storm_logs_supported": "true",
                "storm_user": "storm",
                "storm_user_nproc_limit": "65536",
                "content": "\n#!/bin/bash\n\n# Set Storm specific environment variables here.\n\n# The java implementation to use.\nexport JAVA_HOME={{java64_home}}\n\nexport STORM_CONF_DIR={{conf_dir}}\nexport STORM_HOME={{storm_component_home_dir}}\n\nexport STORM_JAR_JVM_OPTS={{jar_jvm_opts}}\n\n#set storm-auto creds\n# check if storm_jaas.conf in config , only enable storm_auto_creds in secure mode.\nSTORM_JAAS_CONF=$STORM_HOME/conf/storm_jaas.conf\nSTORM_AUTOCREDS_LIB_DIR=$STORM_HOME/external/storm-autocreds\n\nif [ -f $STORM_JAAS_CONF ] && [ -d $STORM_AUTOCREDS_LIB_DIR ]; then\n  export STORM_EXT_CLASSPATH=\"$STORM_AUTOCREDS_LIB_DIR/*\"\nfi"
            }
        }
    }
  ],
  "host_groups": [
    {
      "name": "master",
      "cardinality": "1",
      "components": [
        {
          "name": "ATLAS_SERVER"
        },
        {
          "name": "RANGER_TAGSYNC"
        },
        {
          "name": "RANGER_USERSYNC"
        },
        {
          "name": "RANGER_ADMIN"
        },
        {
          "name": "INFRA_SOLR"
        },
        {
          "name": "KNOX_GATEWAY"
        },
        {
          "name": "HIVE_SERVER"
        },
        {
          "name": "HIVE_METASTORE"
        },
        {
          "name": "DRUID_OVERLORD"
        },
        {
          "name": "DRUID_COORDINATOR"
        },
        {
          "name": "DRUID_ROUTER"
        },
        {
          "name": "DRUID_BROKER"
        },
        {
          "name": "SUPERSET"
        },
        {
          "name": "HBASE_MASTER"
        },
        {
          "name": "KAFKA_BROKER"
        },
        {
          "name": "ZOOKEEPER_SERVER"
        },
        {
          "name": "NAMENODE"
        },
        {
          "name": "SECONDARY_NAMENODE"
        },
        {
          "name": "RESOURCEMANAGER"
        },
        {
          "name": "HISTORYSERVER"
        },
        {
          "name": "APP_TIMELINE_SERVER"
        },
        {
          "name": "LIVY2_SERVER"
        },
        {
          "name": "SPARK2_CLIENT"
        },
        {
          "name": "SPARK2_JOBHISTORYSERVER"
        },
        {
          "name": "ZEPPELIN_MASTER"
        },
        {
          "name": "REGISTRY_SERVER"
        },
        {
          "name": "NIFI_REGISTRY_MASTER"
        },
        {
          "name": "NIFI_CA"
        },
        {
          "name": "METRICS_GRAFANA"
        },
        {
          "name": "METRICS_MONITOR"
        },
        {
          "name": "DATANODE"
        },
        {
          "name": "YARN_CLIENT"
        },
        {
          "name": "HDFS_CLIENT"
        },
        {
          "name": "TEZ_CLIENT"
        },
        {
          "name": "INFRA_SOLR_CLIENT"
        },
        {
          "name": "ZOOKEEPER_CLIENT"
        },
        {
          "name": "MAPREDUCE2_CLIENT"
        },
        {
          "name": "ATLAS_CLIENT"
        },
        {
          "name": "HBASE_CLIENT"
        },
        {
          "name": "HIVE_CLIENT"
        },
        {
          "name": "STREAMLINE_SERVER"
		}
      ]
    },
    {
      "name": "hdp_worker",
      "cardinality": "1+",
      "components": [
        {
          "name": "NODEMANAGER"
        },
        {
          "name": "DATANODE"
        },
        {
          "name": "HBASE_REGIONSERVER"
        },
        {
          "name": "MAPREDUCE2_CLIENT"
        },
        {
          "name": "YARN_CLIENT"
        },
        {
          "name": "HDFS_CLIENT"
        },
        {
          "name": "SPARK2_CLIENT"
        },
        {
          "name": "TEZ_CLIENT"
        },
        {
          "name": "ZOOKEEPER_CLIENT"
        },
        {
          "name": "ATLAS_CLIENT"
        },
        {
          "name": "HBASE_CLIENT"
        },
        {
          "name": "HIVE_CLIENT"
        },
        {
          "name": "METRICS_MONITOR"
        }
      ]
    },
    {
      "name": "hdf_worker",
      "cardinality": "1+",
      "components": [
        {
          "name": "METRICS_COLLECTOR"
        },
        {
          "name": "DRUID_HISTORICAL"
        },
        {
          "name": "DRUID_MIDDLEMANAGER"
        },
        {
          "name": "DATANODE"
        },
        {
          "name": "NIFI_MASTER"
        },
        {
          "name": "HIVE_CLIENT"
        },
        {
          "name": "ZOOKEEPER_CLIENT"
        },
        {
          "name": "ATLAS_CLIENT"
        },
        {
          "name": "SPARK2_CLIENT"
        },
        {
          "name": "MAPREDUCE2_CLIENT"
        },
        {
          "name": "TEZ_CLIENT"
        },
        {
          "name": "HBASE_CLIENT"
        },
        {
          "name": "HIVE_CLIENT"
        },
        {
          "name": "METRICS_MONITOR"
        },
        {
          "name": "STORM_UI_SERVER"
		},
        {
          "name": "NIMBUS"
		}
      ]
    }
  ],
  "Blueprints": {
    "blueprint_name": "personality-recognition-demo",
    "stack_name": "HDP",
    "stack_version": "3.0"
  }
}